
% BATTLE FUNCTION LIBRARY
% This file lists script API functions (those callable from scripts) which are loaded
% during battle. Most of these functions are unavailable outside of battles.
% Functions available at all times are found in shared_func_library

% You can add new functions to this file or rename exising ones.
% Function names and addresses must have a one-to-one relationship, but functions may
% have multiple argument lists / call signatures, each with its own line in this file.

% Basic argument types are: int, bool, ???
% Additional types can be added with enum files in /res/database/types/

% Arguments can also be pointers to data structures. If the type is known, these data
% structures will be examined and dumped during the recursive dump process.

% Pointer arguments can specify a name, ex: $Script("Init") or a length, ex: $IntTable(2)
% The length can also be given by one of the other function arguments, ex: $VectorList(#2)
% (in this example, we set the list length to the value of the third function argument).

% Not for scripts, but functions use these:
80269D6C : GetActor     :   *   % *** accepts an actorID and returns a pointer
8026445C : GetSprite    :   *   % *** args = actorID, sprite index -- returns pointer to sprite

8024E61C : UseCamPreset     :   int     % args : index -- if (byte) 80280CE0 != 0, index into jump table at 8029CC48... [8024CFA8]
% 8024E664
% 8024E6B4
% 8024E748
% 8024E820 sets shorts cam[1C] to cam[2A] for 800B22D8 (cameras[1])
8024E90C : SetCamTarget     :   int, int, int   % sets the camera target position
% 8024E9B0 sets vector cam[54] for 800B22D8 (cameras[1])
8024EA58 : SetCamOffsetZ    :   int     % bugged? treats z offset as a short rather than a byte.
8024EA98 : AddCamOffsetZ    :   int     % unused and bugged. treats z offset as a short rather than a byte.
8024EAE4 : SetCamYaw        :   int     % 
8024EC6C : SetCamZoom       :   int     % args : radial distance from target
8024ECAC : AddCamZoom       :   int     % args : change in radial distance from target
% 8024ECF8 -- sets camera bytes at 8029F2A2/A3/A5
8024ED78 : FreezeCam        :   bool    % sets (byte) 80280CE0

8024EB24 : CamTargetActor   :   actorID     % if (byte) 80280CE0 != 0, delegates to func_8024E43C, which sets (short) 8029F27C = actorID 

8024EC08 : MoveCamOver      :   int         % args : move time  !!! terrible name! moves the camera to a preset over a certain number of frames

802512B4 : ShowMessageBox           :   int, int    % args : string index (table 80283770), duration
8025130C : ShowVariableMessageBox   :   int, int, int   % args : string index (table 80283770), duration, variable quantity (used for "attack power increased by X", etc)

% Used by items and star powers to inflict damage or status on an enemy (without a source actor)
80252728 : ItemDamageEnemy  :   actorID, int, int, int, int % args: target, flags, status effect, damage, ???
80252D40 : ItemCheckHit     :   actorID, int, int, int, int % args: target, flags, status effect, damage, ???

80252F30 : SayMessage       :   print, actorID, ???, int, int   % args : stringID, actorID, ???, talk animation, idle animation
% 802532D0 ??? end message?

802535F8 : SetDmaTableLoadDest  :   int     % args: addr -- sets the destination for the next function, overriding the default value specified in the table
80253624 : LoadFromDmaTable     :   int     % args: index -- loads one of the entries in the current battle sections DmaTable

8025385C : PlaySoundAtActor     :   actorID, soundID        % ### args : actorID, soundID
802538D0 : PlaySoundAtSprite    :   actorID, int, soundID   % ### args : actorID, spriteIndex, soundID

80253FDC : MultiplyByActorScale     :   int                 % args: x -- multiplies a scalar by an actor's scale factor (actor[188])
80254048 : MultiplyVec2ByActorScale :   int, int            % args: x, y -- multiplies 2D vector by an actor's scale factor (actor[188])
802540DC : MultiplyVec3ByActorScale :   int, int, int       % args: x, y, z -- multiplies 3D vector by an actor's scale factor (actor[188])

80261D28 : IncrementPlayerHP    :   none    % no args, will not exceed maximum
80261D60 : IncrementPlayerFP    :   none    % no args, will not exceed maximum

802681C0 : LoadActionCommand    :   int     % args : action command id (0x01 - 0x17)

% 802695A8 : get (byte) battle[84]
% 802695D4 : set battle[84]
% 80269C24 = SetActorPositionF (float x, float y, float z)
% 80269C70
% 80269D20 = SetActorPositionD (double x, double y, double z)
% 80269D6C = GetActor (actorID)
80269DE4 : LoadBattleSection    :   int     % args : battle section index
80269E28 : GetBattlePhase       :   int     % args : *out state
80269E54 : GetLastElement       :   int     % args : *out element of last attack from battle[188]
% 80269E80 : get (byte) battle[19A]
% 80269EAC : set battle[19A]
80269EC4 : SetGoalToHome    :   actorID     % args : actorID -- sets goal position to NPC's home position
% 80269F2C : copy home -> vec3f at D4
80269F94 : SetGoalToIndex   :   actorID, int    % args : actorID, index -- sets goal position to a standard indexed location (table at 80283524)
8026A05C : GetIndexFromPos  :   actorID, int    % args : actorID, *index -- gets the nearest home index given an actor's current position
8026A0D4 : GetIndexFromHome :   actorID, int    % args : actorID, *index -- gets the nearest home index given an actor's home position
% 8026A14C ???  somehow counts the number of enemies (subject to some flags?) -- calls func_80269698 with current position (actor[144/148/14C]), then calls func_80269660 (&actor, actorID, arg1)
8026A1EC : ForceHomePos     :   actorID, int, int, int      % args : actorID, x, y, z -- sets home position and teleports there
8026A2D0 : SetHomePos       :   actorID, int, int, int      % args : actorID, x, y, z -- 
8026A3A8 : SetGoalToTarget  :   actorID                     % args : actorID -- sets goal to the position of the actor's target
8026A510 : SetGoalToPos     :   actorID, int, int, int      % args : actorID, x, y, z -- note: skips any arg = FF439EB2 (-12345678`)
% 8026A62C : sets actor[D4/D8/DC] -- skips any arg = FF439EB2 (-12345678`)
8026A748 : AddToGoalPos     :   actorID, int, int, int      % args : actorID, dx, dy, dz -- adjust goal position
8026A820 : GetGoalPos       :   actorID, int, int, int      % args : actorID, *x, *y, *z
% 8026A8EC : gets actor[D4/D8/DC]
8026A9B8 : GetSpriteTarget  :   actorID, int, int, int, int % args : actorID, spriteID, *x, *y, *z
8026AAA8 : GetActorPos      :   actorID, int, int, int      % args : actorID, *x, *y, *z
8026AB74 : GetSpriteOffset  :   actorID, int, int, int, int % args : actorID, spriteID, *x, *y, *z -- if sprite[0] & 00100000 return sprite[2C/30/34] else return sprite[14/16/18] ...not consistent with other SpriteOffset functions!
8026AC88 : GetSpritePos     :   actorID, int, int, int, int % args : actorID, spriteID, *x, *y, *z
8026AD74 : GetHomePos       :   actorID, int, int, int      % args : actorID, *x, *y, *z
8026AE40 : SetActorPos      :   actorID, int, int, int      % args : actorID, x, y, z
8026AF18 : SetSpritePos     :   actorID, int, int, int, int % args : actorID, spriteID, x, y, z -- if sprite[0] & 00100000 set sprite[2C/30/34] to x/y/z, else set sprite[14/16/18] to x/y/z
8026B0A0 : SetEnemyTargetOffset :   actorID, int, int, int  % args : enemyID, spriteID, sprite[6C], sprite[6E] -- only works for enemy actors: actorID = 020X
8026B1B0 : SetAnimation     :   actorID, int, int           % args : actorID, spriteID, animation
8026B238 : GetAnimation     :   actorID, int, int           % args : actorID, spriteID, animation
8026B2D0 : SetAnimationSpeed    :   actorID, int, int       % args : actorID, spriteID, *Float animation rate (1.0 = default)
8026B358 : SetActorAngle        :   actorID, int            % args : actorID, angle
8026B3C8 : GetActorAngle        :   actorID, int            % args : actorID, *out angle
% 8026B438 : set sprite[64]     :   actorID, int, int       % args : actorID, spriteID, value
% 8026B4C0 : get sprite[64]     :   actorID, int, int       % args : actorID, spriteID, *out
8026B55C : SetActorJumpscale    :   actorID, int            % args : actorID, scale
8026B654 : SetActorSpeed        :   actorID, int            % args : actorID, speed
% 8026B6D0 : sets actor[108] to float value (like SetActorSpeed)
8026B74C : SetSpriteJumpscale   :   actorID, int, int       % args : actorID, spriteID, scale
8026B7EC : SetSpriteSpeed       :   actorID, int, int       % args : actorID, spriteID, speed
8026B88C : SetJumpAnimations    :   actorID, int, int, int, int % args : actorID, ??? (sets actor[77]), start/aerial/end animations
8026B92C : AddActorPos  :   actorID, int, int, int  % args: actorID, dx, dy, dz -- adds to current position
% 8026BA04 : set actor[150/152/154]     : actorID, x, y, z
8026BAE8 : GetSpriteOffset2 :   actorID, int, int, int, int     % args : actorID, spriteID, *x, *y, *z -- if sprite[0] & 00100000, return sprite[1A/1C/1E], else return sprite[14/16/18]
8026BC38 : SetSpriteOffset  :   actorID, int, int, int, int     % args : actorID, spriteID, x, y, z -- if sprite[0] & 00100000, set sprite[1A/1C/1E] to x/y/z, else set sprite[14/16/18] to x/y/z
8026BD88 : AddSpriteOffset  :   actorID, int, int, int, int     % args : actorID, spriteID, dx, dy, dz -- if sprite[0] & 00100000, add dx/dy/dz to sprite[1A/1C/1E], else add dx/dy/dz to sprite[14/16/18]
% 8026BF48 : ???        : bool      % args: (1) increments or (0) decrements counter at battle[8C]
8026BFB4 : GetActorVar      :   actorID, int, int           % args : actorID, index, *dest
8026C044 : SetActorVar      :   actorID, int, int           % args : actorID, index, value
8026C0D4 : ActorVarAdd      :   actorID, int, int           % args : actorID, index, amount -- adds amount to variable
8026C170 : GetSpriteVar     :   actorID, int, int, int      % args : actorID, spriteID, index, *dest
8026C22C : SetSpriteVar     :   actorID, int, int, int      % args : actorID, spriteID, index, value
8026C2E8 : SpriteVarAdd     :   actorID, int, int, int      % args : actorID, spriteID, index, amount -- adds amount to variable
8026C3AC : SetActorRotation :   actorID, int, int, int      % args : actorID, Rx, Ry, Rz -- center of rotation is at base of sprite
8026C4AC : SetActorRotationOffset   :   actorID, int, int, int      % args : actorID, dx, dx, dy -- offsets the center of rotation from default position (bottom center)
8026C56C : GetActorRotation     :   actorID, int, int, int          % args : actorID, *Rx, *Ry, *Rz
8026C634 : SetSpriteRotation    :   actorID, int, int, int, int     % args : actorID, spriteID, Rx, Ry, Rz
8026C740 : SetSpriteRotationOffset  :   actorID, int, int, int, int % args : actorID, spriteID, dx, dy, dz -- offsets the center of rotation from default position (bottom center)
8026C828 : GetSpriteRotation    :   actorID, int, int, int, int     % args : actorID, spriteID, *Rx, *Ry, *Rz
8026C904 : SetActorScale        :   actorID, int, int, int          % args : actorID, Sx, Sy, Sz
% 8026C9C4  ??? : actorID, int, int, int     Sets actor[17C/180/184]
8026CA84 : GetActorScale        :   actorID, int, int, int          % args : actorID, *Sx, *Sy, *Sz
8026CB4C : SetSpriteScale       :   actorID, int, int, int, int     % args : actorID, spriteID, Sx, Sy, Sz
8026CC34 : GetSpriteScale       :   actorID, int, int, int, int     % args : actorID, spriteID, *Sx, *Sy, *Sz
8026CD10 : GetBattleFlags       :   int                     % args : *out battle[0] flags
8026CD3C : SetBattleFlagBits    :   int, bool               % args : battle[0] flags, set/reset
8026CDA0 : GetBattleFlags2      :   int                     % args : *out battle[4] flags
8026CDCC : SetBattleFlagBits2   :   int, bool               % args : battle[4] flags, set/reset
8026CE30 : SetActorFlags        :   actorID, int            % args : actorID, flags value
8026CE8C : SetActorFlagBits     :   actorID, int, bool      % args : actorID, selected flags, value (set/reset)
8026CF20 : GetActorFlags        :   actorID, int            % args : actorID, *out
8026CF88 : SetSpriteFlags       :   actorID, int, int                   % args : actorID, spriteID, flags
8026D010 : SetSpriteFlagBits    :   actorID, int, int, bool             % args : aatorID, spriteID, flags, 1 (set : OR flags) | 0 (reset : AND ~flags)

% 8026D0D0 :    set sprite[04] flags    :   actorID, int, int           % args : actorID, spriteID, flags
% 8026D158 :    set sprite[04] bits     :   actorID, int, int, bool     % args : actorID, spriteID, flags, 1 (set : OR flags) | 0 (reset : AND ~flags)
% 8026D218 :    get sprite[00]          :   actorID, int, int           % args : actorID, spriteID, *out sprite[00]
% 8026D2AC :    get sprite[04]          :   actorID, int, int           % args : actorID, spriteID, *out flags at sprite[04]
8026D340 : SetSpriteEventFlags  :   actorID, int, int           % args : actorID, spriteID, flags
8026D3C8 : SetSpriteEventBits   :   actorID, int, int, bool     % args : actorID, spriteID, flags, 1 (set : OR flags) | 0 (reset : AND ~flags)
8026D488 : GetSpriteEventFlags  :   actorID, int, int           % args : actorID, spriteID, *out flags at sprite[7C]
% 8026D51C :    set sprite[80] flags    :   actorID, int, int           % args : actorID, spriteID, flags
% 8026D5A4 :    set sprite[80] bits     :   actorID, int, int, bool     % args : actorID, spriteID, flags, 1 (set : OR flags) | 0 (reset : AND ~flags)
8026D664 : HPBarToHome          :   actorID     % ### args : actorID, sets the location of the HP bar to home + hp offset
8026D7A8 : HPBarToCurrent       :   actorID     % args : actorID, sets the location of the HP bar to current position + hp offset
% 8026D8EC
% ...

8026DB64 : SummonEnemy          :   $SpecialFormation(1), ???           % args : $SpecialFormation, flag? (0 : default | 1 : general guy) : RETURNS enemy ID on *Var[0]
% afterward, VAR[A] contains the next available empty position index?

8026DE00 : GetOwnerID           :   int             % args : *actorID -- returns the actorID of a script owner
8026DE28 : SetOwnerID           :   actorID         % args : actorID -- set script owner to some actorID
8026DE5C : ActorExists          :   actorID, int    % args : actorID, *out (0 = no | 1 = yes)

% 8026E208 : ??? : bool : sets (byte) battle[94] = 1 if arg true, or -1 if arg false

8026E310 : CreateTargetList     :   int         % args: eligible target flags
8026E354 : InitTargetIterator   :   none        % no args
8026E3A8 : SetOwnerTarget       :   int, int    % args : target actorID, target spriteID
8026E414 : ChooseNextTarget     :   iter, int   % args : ?? (usually 0), has next (0 = true | -1 = false)
8026E864 : GetTargetListLength  :   int         % args : *out length
8026E8AC : GetOwnerTarget       :   int, int    % args : *out target actorID, *out target spriteID
% 8026E914 -- get (short) battle[1A4], (byte) battle[1A6]
% 8026E974 -- get (short) battle[1A8]
% 8026E9A0 -- set (short) battle[1A4], (byte) battle[1A6]
8026E9FC : GetDistanceToTarget  :   actorID, int    % args : actorID, *out distance

% 8026EA7C (20) used with 8026ED20 to make enemies flash when charged, among other things. not well understood.
%8026EBF8  (9)
% 8026ED20 (11) set sprite[0] flag 01000000 -- args : actorID, spriteID, bool (1 = set, 0 = clear)  enabledDecorations?
8026EE88 : AddActorDecoration       :   actorID, int, int, decoration           % args : actor, sprite, decoration index, type
8026EFF0 : ModifyActorDecoration    :   actorID, int, int, int, int, int, int   % args : actor, sprite, decoration index, size X, size Y, offset X, offset Y (unused)
8026EF4C : RemoveActorDecoration    :   actorID, int, int                           % args : actor, sprite, decoration index

8026F0EC : UseIdleAnimation     :   actorID, bool       % args : (0 = scripted animations | 1 = idle animations ), must be called
8026F230 : GetStatusFlags       :   actorID, int        % args : actorID, *out flags

8026F470 : SetSpriteAlpha       :   actorID, int, int   % args : actorID, spriteID, 00 (transparent) - FF (opaque)

% 8026F60C : stores a byte at 800DC0FD -- used when aborting battles after SetBattleFlagBits ( 00060000 .True )

8026F638 : SetBattleVar         :   int, int        % args : var index, value
8026F694 : GetBattleVar         :   int, int        % args : var index, *out value

% 8026F740 JumpPlayer?

8026FB20 : SetActorType         :   int, int        % args : actorID, actor type (from ActorTypes.xml)
% ...
% 8026FBB0
8026FC04 : GetActorAttackBoost  :   actorID, int        % args : actorID, *out value
8026FC6C : GetActorDefenseBoost :   actorID, int        % args : actorID, *out value
% Always call 8026BF48 before and after HealNpc, Electrify, Vanish, AttackUp, DefenseUp
8026FCD4 : BoostAttack          :   actorID, int        % args : actorID, amount -- icons for amount > 3 does not display correctly
80270174 : BoostDefense         :   actorID, int        % args : actorID, amount
80270614 : VanishActor          :   actorID, int        % args : actorID, duration??? (0 | 2)
8027095C : ElectrifyActor       :   actorID, int        % args : actorID, duration??? (0 | 3)
80270CA4 : HealActor            :   actorID, int, ???   % args : actorID, amount, ??? (some kind of heal all flag?)
%8027114C : WaitFor???          : none
80271160 : CopyStatBoosts       :   actorID, actorID    % args : source actor, dest actor
802733C4 : GetMenuSelection     :   int, int, int       % args : *out menu selected move type (battle[178]), *out selected itemID (battle[17A]), *out selected moveID (battle[17C])

80277160 : DispatchEventActor   :   *   % *** (*actor, eventID) -- kills running HandleEvent / TakeTurn scripts
80271658 : DispatchEventPlayer  :   *   % *** (eventID) -- kills running HandleEvent / TakeTurn scripts
802716E4 : DispatchEventPlayer2 :   *   % *** (eventID) -- kills running HandleEvent script

80274234 : GetPlayerHP      :   int     % args: *out
80274260 : DamageEnemy      :   int, int, int, int, int, int        % read doc: "Damage and Event System"
802744A0 : PowerBounceEnemy :   int, int, int, int, int, int, int   % identical to DamageEnemy, used only for Power Bounce
802746F0 : CheckEnemyHit    :   int, int, int, int, int, int        % read doc: "Damage and Event System"

80274978 : EnablePlayerBlur :   int     % args : motion blur enabled (sometimes -1)

80278930 : BindTakeTurn     :   actorID, $Script("TakeTurn")    % binds a script to execute when their turn begins
80278A94 : BindIdle         :   actorID, $Script("Idle")        % binds a script to execute while idle (goombas shuffle back and forth, etc)
80278B4C : EnableIdleScript :   actorID, int                    % args : actorID, (0 = pause | 1 = running | -1 = reset )
80278C20 : BindHandleEvent  :   actorID, $Script("HandleEvent") % binds a script to respond to battle events
80278C94 : BindNextTurn     :   actorID, $Script("NextTurn")    % binds a script to the start/end of player/enemy turns (4 events), discriminate with GetBattlePhase
% Movement functions
80278D08 : JumpToGoal       :   actorID, int, int, int, int     % args : actorID, height (actor[70]), 0 (script[78]), boolean use dust effect (flag 1 for script[7C]), 0 (flag 2 for script[7C])
80279E64 : RunToGoal        :   actorID, int                    % args : actorID, move time (only moves in a horizontal plane)
80279E64 : RunToGoal        :   actorID, int, bool              % args : actorID, move time, enable dust (drawn when move speed < 4.0)
% 8027A264 (actorID, 0), used with 8026A62C
8027A4E4 : JumpSpriteA      :   actorID, int, int, int, int, int        % strange (bugged?) function signature that ignores the last argument. this is the only version that is called though!
8027A4E4 : JumpSpriteA      :   actorID, int, int, int, int, int, bool  % args : actorID, spriteID, x, y, z, move time, landing dust effect
8027A854 : JumpSpriteB      :   actorID, int, int, int, int, int        % args : actorID, spriteID, x, y, z, move time -- always creates dust effect
% 8027AB5C
8027ACAC : RunSpriteTo      :  actorID, int, int, int, int, int         % args : actorID, spriteID, x, y, z, move time -- moves with a trail of dust behind
% func_8027B0DC does easing types
8027B624 : MoveToGoal       :   actorID, int, int, easing               % args : actorID, actor[70] (move time), actor[72] (jump height), easing function
% 8027BBB8 : moves actor    : actorID, int, int, easing                 % args : actorID, (move time) actor[120], (parabolic height) actor[122], easing function
8027BF38 : MoveSpriteTo     :   actorID, int, int, int, int, int, int, easing
% args : actorID, spriteID, x, y, z, move time, jump height (can be negative), easing function -- moves in a parabolic arc without collision or gravity.
% arg 2-4: destination coordinates
% arg 5: time (0 = calculate based on speed from SetSpriteSpeed)    => (short) Sprite[10][38]
% arg 6: peak height (can be zero)                                  => (short) Sprite[10][3A]
% arg 7: easing type (0-D used as an index to jump table by func_8027B0DC)  => script[7C]

% These go together... another form of moving actors
%   Call     8026B6D0       ( FFFFFF81 *Float[0.60058594] )
%   Call     8026A62C       ( FFFFFF81 *Var[0] *Var[1] *Var[2] )
%   Call     8027BBB8       ( FFFFFF81 00000000 FFFFFFFB 00000000 ) half-parabola? spline?

8027C4E0 : GetEventType     :   actorID, int        % args : actorID, *out type
8027C548 : SetTargetActor   :   actorID, actorID    % args: attacker ID, defender ID -- sets the attack target of one actor, also sets (byte) actor[426] = 1
8027C5C8 : SetEnemyHP       :   actorID, int        % args : actorID, hp
8027C6A0 : GetActorHP       :   actorID, int        % args : actorID, *out
8027C748 : GetEnemyMaxHP    :   actorID, int        % args : actorID, *out
8027C7B0 : RemoveActor      :   actorID             % removes an actor

8027CA74 : SetDefenseTable      :   actorID, int, $DefenseTable     % args : actorID, spriteID (1), $DefenseTable
8027CB08 : SetStatusTable       :   actorID, $StatusTable           % args : actorID, $StatusTable
8027CB7C : SetIdleAnimations    :   actorID, int, $IdleAnimations   % args : actorID, spriteID (1), $IdleAnimations
% 8027CC10 -- unused, looks bugged, return values from GetVariable and GetActor are ignored and it does nothing
%
8027CCB4 : DamageTarget         :   actorID, ???, int, ???, ???, int, int   % args : source, *ret, type flags, ???, status flags, ??, damage, block type (20) -- used to damage Mario/partner/sometimes other enemies
% block types: 20 = single hit
% block types: 10 = chain of hits (good/great/super)
% 8027CED4 -- unused
%
8027CFB8 : CheckPlayerHit       :   actorID, ???, int, int, int, int % args : attacker ID, *ret, type flags, status flags, damage amount, battle flags
% check whether an attack on Mario/partner should hit. return value is usually switched, if we get 5/6 use the miss animations
% arg0  actorID
% arg1  *ret
% arg2  type flags
% arg3  status flags
% arg4  damage amount
% arg5  changes battle flags
% return values:
% 0 = hit
% 5 = lucky
% 6 = miss (Cloud Nine, Outta Sight)
% 7 = hit, player is electrified
% 8 = hit, player is stoned

8027D264 : DispatchEvent    :   actorID, event  % args : self-explanatory, not widely-used
% 8027D2D8 : ???    :   actorID     % delegates to func_80266ADC, which sets flag 00080000 and sets (byte) actor[206] = FF
% 8027D32C : ???    :   actorID     % delegates to func_80266AF8, which clears flag 00080000 and sets (byte) actor[206] = 0
8027D380 : SetTargetOffset  :   actorID, int, int, int  % args: actorID, spriteID, sprite[6C], sprite[6E] -- more commonly used variant of func_8026B0A0, works on any actor
% 8027D434 : ???    :   actorID, spriteID, int -- sets sprite[70]
% 8027D4C8 : ???    :   actorID, spriteID, int, int -- sets sprite[75/76]

8027D57C : EnableActorBlur  :   actorID, int        % args : actorID, motion blur enabled (sometimes -1?)
%8027D7C4 : returns byte 800B0F15
% 8027D7F0 : Sets battle[0] bit 00200000
8027DA68 : GetActorType     :   actorID, int        % args : actorID, *out type
8027DB3C : GetLastDamage    :   actorID, int        % args : actorID, *out damage taken

8027DBA4 : EnableActorGlow  :   actorID, bool       % args : actorID, glow effect enabled

8027FDB4 : DamageEnemyP     :   ???, int, int, int, int, int
80280004 : InflictStatusP   :   int, int, int, int, int, int, int   % used by partners to afflict enemies with status effects, has an extra argument to allow variable chance to inflict
802804D0 : CheckTargetHitP  :   ???, int, int, int, int, int        % args : *ret (6 = miss), unknown -- used by partner moves to check whether attacks will hit enemies
% third arg flags:
% 00000001 = ignore spike
