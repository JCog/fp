
% SHARED FUNCTION LIBRARY
% This file lists script API functions (those callable from scripts) which are loaded
% at all times. These functions are available in the overworld and during battle.

% You can add new functions to this file or rename exising ones.
% Function names and addresses must have a one-to-one relationship, but functions may
% have multiple argument lists / call signatures, each with its own line in this file.

% Basic argument types are: int, bool, ???
% Map scripts can also use: modelID, colliderID, and zoneID
% Additional types can be added with enum files in /res/database/types/

% Arguments can also be pointers to data structures. If the type is known, these data
% structures will be examined and dumped during the recursive dump process.

% Pointer arguments can specify a name, ex: $Script("Init") or a length, ex: $IntTable(2)
% The length can also be given by one of the other function arguments, ex: $VectorList(#2)
% (in this example, we set the list length to the value of the third function argument).

/%
All matched from 800B91A4 to 800D91D0 (2002C)
All matched from 8010F6C4 to 8014B74C (3C088)
All matched from 80191CC0 to 80197000 (5340)
All matched from 8019D768 to 801A6690 (8F28)
All matched from 801B3430 to 801B6000 (2BD0)
All matched from 801D7C78 to 801D9164 (14EC)
All matched from 801EC878 to 801EF654 (2DDC)
All matched from 801EF658 to 801F4D44 (56EC)
All matched from 801F54B8 to 801F8644 (318C)
All matched from 8023163C to 80238000 (69C4)
All matched from 802BEC7C to 802D9CA0 (1B024)
All matched from 802E0C88 to 802FB808 (1AB80)   802E0C10 to ???
All matched from 80327678 to 80329F10 (2898)
All matched from 8033181C to 8034F808 (1DFEC)
%/

% Not for scripts, but functions use these:
8002973C : DmaCopy          :   *
800299FC : GetRandom        :   *
80029ED4 : Dist2D           :   *
80029F2C : Dist3D           :   *
8002A16C : SinRad           :   *
8002A2EC : SinDeg           :   *
8002A1D0 : CosRad           :   *
8002A350 : CosDeg           :   *
8006ED70 : StringCompare    :   *
802C7ABC : GetVariable      :   *
802C8098 : SetVariable      :   *
802C842C : GetFloatVariable :   *
802C8640 : SetFloatVariable :   *

% Used ONCE in battle scripts -- kammy koopa spawns a hammer block during end fight
80111D38 : MakeEntity       :   *

/%
% 802C3000 - 802D9CA0
%/

802C8B60 : TranslateModel   :   modelID, int, int, int      % args : modelID, dX, dY, dZ
802C8C64 : RotateModel      :   modelID, int, int, int, int % args : modelID, angle, rX, rY, rZ
802C8D88 : ScaleModel       :   modelID, int, int, int      % args : modelID, scaleX, scaleY, scaleZ
802C8F28 : CloneModel       :   modelID, int                % args : modelID, newModelID
802C8F80 : GetModelCenter   :   modelID                     % args : modelID -- returns on *VAR[0] *VAR[1] *VAR[2]
802C9000 : SetTexPanner     :   modelID, int                % args : modelID, panID -- sets a model's panID and sets the texture pan flag
802C907C : SetModelFlag10   :   modelID, bool   % ??? ***
% 802C90FC
% 802C91A4
802C9208 : EnableTexPanning :   modelID, bool               % args : modelID, 1 (enable) | 0 (disable) ***
802C9288 : EnableModel      :   modelID, bool               % args : modelID, 1 (enable) | 0 (disable) ***
% 802C9308  (289) modelID, bool (1 = visible, 0 = hidden) -- another enable group? how is it different from the other? (see mac_00)
% 802C9364 : SetTexPan      :   int, int, int, int      % args : tex pan group (from model property 5F), ???, offset U, offset V
% 802C9428
% 802C94A0

% 802C971C : ??? :  modelID % args: groupID -- somehow modifies the way the group is rendered, making it all additive? used in jan_04 for the water, isk_07 for a door

802C97B4 : TranslateGroup   :   modelID, int, int, int      % args : modelID, dX, dY, dZ
802C98D8 : RotateGroup      :   modelID, int, int, int, int % args : modelID, angle, rX, rY, rZ
802C9A1C : ScaleGroup       :   modelID, int, int, int      % args : modelID, scaleX, scaleY, scaleZ
802C9B98 : EnableGroup      :   modelID, bool               % args : modelID, 1 (enable) | 0 (disable)
802C9DCC : ModifyColliderFlags  :   int, colliderID, ???    % args : operations (below), colliderID, flags  
% 0 OR flag bits
% 1 AND ~flag bits
% 2 set flags
% 3 set flags in low byte (000000FF)

802CA114 : ParentColliderToModel    :   colliderID, modelID     % args : colliderID, modelID -- associates a model with a collider and applies the model's transformation
802CA188 : UpdateColliderTransform  :   colliderID              % args : colliderID -- applies transformation from parent model
% 802CA254  (284)
%

802CA558 : PlaySoundAtModel     :   modelID, int, ???       % args : modelID, soundID, ??? (always zero?)
802CA614 : PlaySoundAtCollider  : colliderID, int, ???  % args : modelID, soundID, ??? (always zero?)

% CAMERA FUNCTIONS
802CA6C0 : SetCamFlag2      :   camID, bool     % args : camID, bool flag
802CA774 : SetCamFlag80     :   camID, bool     % args : camID, bool flag
802CA828 : SetCamPerspective :  camID, int, int, int, int   % args : camID, type, vfov/2, near clip, far clip -- this type is NOT the same camera type from zones, fortunately it is ALWAYS 3 here 
% 802CA988  7     
802CAB18 : SetCamViewport   :   camID, int, int, int, int   % args : camID, startX, startY, width, height
% 802CABE8  8    
802CAD98 : SetCamBGColor    :   camID, int, int, int    % args : camID, R, G, B -- components are in range 0-255, this is almost always black (0,0,0). only ice palace is different.

% 802CAF2C  (67) camID, vec3 -- sets vec3f at cam[60] -- moves the sample position XYZ
% 802CB008  9     
802CB2A8 : ShakeCam         :   camID, int, int, int    % args : camID, mode (0/2 : up and down, 3 : angular), duration, magnitude
802CB680 : SetCamFlag4      :   camID, bool             % args : camID, bool flag
%
802CB79C : PanToTarget      :   camID, int, int         % args : camID, *FLOAT easing phase, type (1 : target | 0 : player) -- pans the camera with a cosine easing function at the ends
802CB860 : UseSettingsFrom  :   camID, int, int, int    % args : camID, x, y, z -- camera will use control settings from the zone corresponding to a given sampling point
802CB9F8 : LoadSettings     :   camID, $Unknown         % args : camID, *settings ********************** new struct for decoder!!!!!!!!!!!!
802CBAB4 : SetCamType       :   camID, int, int         % args : camID, control type, flag
802CBB48 : SetCamAngles     :   camID, int, int         % args : camID, boom pitch, view pitch
802CBBE4 : SetCamDistance   :   camID, int              % args : camID, boom length
802CBC58 : SetCamPosA       :   camID, int, int         % args : camID, x, y
802CBCF4 : SetCamPosB       :   camID, int, int         % args : camID, x, y
802CBD90 : SetCamPosC       :   camID, int, int         % args : camID, x, y
802CBE2C : SetPanTarget     :   camID, int, int, int    % args : camID, x, y, z
802CBEF0 : SetCamSpeed      :   camID, int              % args : camID, .FLOAT
802CBF64 : GetCamType       :   camID, int, int         % args : camID, *Vout type, *Vout flag
802CBFF4 : GetCamAngles     :   camID, int, int         % args : camID, *Vout boom pitch, *Vout view pitch
802CC084 : GetCamDistance   :   camID, int              % args : camID, *Vout boom length
802CC0F4 : GetCamPosA       :   camID, int, int         % args : camID, *Vout x, *Vout z
802CC184 : GetCamPosB       :   camID, int, int         % args : camID, *Vout x, *Vout z
802CC214 : GetCamPosC       :   camID, int, int         % args : camID, *Vout x, *Vout z (unused!)
802CC2A4 : GetCamPosition   :   camID, int, int, int    % args : camID, *Vout x, *Vout y, *Vout z
802CC354 : WaitForCam       :   camID, int              % args : camID, .FLOAT[1.0] (always) -- checks if the camera has completed its assigned motion yet
802CC660 : UseSettings      :   camID, int, int, int, int, int  % args : camID, default type?, offsetRight, boom length, boom pitch (usually +), view pitch (usually -)
802CC8C8 : ResetCam         :   camID, int              % args : camID, *F speed -- copies settings from the player's zone and pans to the player at a given speed

% These functions are responsible for complex model animations in maps like dgb_01 and kmr_11:
% 802CCCEC
% 802CCE6C animates the models, see tank animations from battle script 11 Area OMO2
% 802CCFE4 does something to the background?

802CCE6C : PlayModelAnimation   :   int, $Unknown       % format not reverse-engineered

% Used only in General Guy fight to align General Guy actor with placeholder model in the Toy Tank model:
% 802CD5C0 some sort of GetModelPosition ( ???, modelID, *out X, *out Y, *out Z)
% 802CD6E0 some sort of GetModelRotation ( ???, modelID, *out Rx, *out Rx, *out Rz)

802CDDB0 : SetNpcRotation       :   npcID, int, int, int    % args : npcID, pitch, yaw, roll (around x/y/z, center of rotation is at base of sprite)
802CE0F4 : SetNpcAnimation      :   npcID, int              % args : npcID, animation
 
802CF060 : SetNpcFlagBits       :   npcID, int, bool        % args : npcID, flags, 1 (set : OR flags) | 0 (reset : AND ~flags)
802CF0F4 : GetNpcPos            :   npcID, int, int, int    % args : npcID, x, y, z
% 802CF208  (43) -- also sets animations, difference between this and 802CE0F4 is not clear
802CF268 : EnableNpcShadow      :   npcID, bool             % args : npcID, shadow enabled
802CF2EC : EnableNpcBlur        :   npcID, bool             % args : npcID, motion blur enabled

802CFC74 : GetCurrentPartner    :   int                     % args : *dest -- returns partner index from 8010F2A2
802D01AC : PlaySoundAtNpc       :   npcID, int, ???         % args : npcID, soundID, ???

/%  
    No idea what to call these functions. The 'ImageObj' they operate
    on is used for projectiles in item scripts. They could have far
    broader applications though.
    
    802D3474 -- CreateImageObj  ( out handle, $ImageData ) creates an icon(?) object
    802D3624 -- RemoveImageObj  ( handle )
    802D36E0 -- SetObjPosition  ( handle, x, y, z )
    802D3840 -- SetObjRotation  ( handle, rx, ry, rz )
    802D38EC -- SetObjScale     ( handle, sx, sy, sz )
    802D39FC -- SetObjJumpScale ( handle, *FLOAT jumpscale )
    802D3C58 -- JumpObj         ( handle, x, y, z, h )
%/

802D45B0 : MakeLerp             :   int, int, int, ???  % args : initial val, final val, frame duration, easing/equation??
802D462C : UpdateLerp           :   none                % no args
802D46B0 : RandInt              :   int, int            % args : max (inclusive), dest -- API wrapper for GetRandom
802D4708 : GetAngleBetweenNPCs  :   npcID, npcID, int   % args : npcID, npcID, *out
802D47B4 : GetAngleToNPC        :   npcID, int          % args : npcID, *out -- angle from player toward NPC
802D4830 : GetAngleToPlayer     :   npcID, int          % args : npcID, *out -- angle from NPC toward player
802D48AC : AwaitPlayerApproach  :   int, int, int       % args : X, Z, R -- pauses the script until the player comes within a certain radius of point (X,Z)
802D4964 : IsPlayerWithin       :   int, int, int, int  % args : X, Z, R, *out boolean out -- returns whether the player is within a certain radius of point (X,Z)
802D4A5C : AwaitPlayerLeave     :   int, int, int       % args : X, Z, R -- pauses the script until the player moves beyond a certain radius from point (X,Z)
802D4B14 : AddVectorPolar       :   int, int, int, int  % args : X (also *out), Z (also *out), R, theta -- offsets a point (X,Z) by a vector given by length and angle

802D5430 : LoadPath         :   int, $VectorList(#2), int, int          % args : time, &vectorList, numVectors, ???

802D5524 : GetNextPathPos   :   none % no args

802D5770 : GetDist2D        :   int, int, int, int, int     % args: *out dist, X1, Y1, X2, Y2

/%
    These two functions assume arg0 is a variable that holds another variable.'
    For example, consider the result of "Set  *Var[0]  *StoryProgress"
    We can use these functions to get/set *StoryProgress through *Var[0].
%/
802D58E0 : SetValueByRef    :   int, int    % sets the variable referenced by arg0 to the value of arg1                     X = GetVar(arg0), Y = GetVar(arg1), SetVar(X, Y)
802D593C : GetValueByRef    :   int, int    % gets the value held by the variable referenced in arg0 and copies it to arg1  X = GetVar(arg0), Y = GetVar(X), SetVar(arg1, Y)

802D5AB4 : ClampFloat       :   int         % args: float variable -- clamps to range 0-360

802D5CE0 : FadeOutMusic     :   int, int                        % args : music player index, fade time (max 10000)
802D5D4C : SetMusicTrack    :   int, songID, int, int           % args : music player index, track #, variation, volume
802D5DF4 : FadeInMusic      :   int, songID, int, int, ???, ??? % args : music player index, track #, variation?, fade time, ??, ??
%802D5EE0
%802D5F28

802D6150 : PlaySound        :   int                         % args : soundID
802D61DC : PlaySoundAt      :   int, ???, int, int, int     % args : soundID (! upper byte), ???, X, Y, Z
802D6314 : UseDoorSounds    :   int     % args : type (0-6) (0 = wood, 1 = metal, 2 = bigwood, 3 = locked?, 4 = rusty metal / prison cell, 5 = quick, 6 = ?)
802D636C : PlaySoundAtF     :   int, ???, int, int, int     % args : soundID (! upper byte), ???, X, Y, Z -- we get looping sounds if the upper byte is 80

% deal with inventory
802D6858 : RemoveKeyItemAt  :   int             % args : key item index -- removes key item at index
802D688C : RemoveItemAt     :   int             % args : item index
802D68C8 : AddKeyItem       :   itemID          % args : itemID
802D699C : HasKeyItem       :   itemID, int     % args : itemID, *out bool has item
802D6A14 : FindKeyItem      :   itemID, int     % args : itemID, *out key item slot (FFFF if not found)
802D6A98 : AddItem          :   itemID, int     % args : itemID, *out item slot (FFFF if none were available)
802D6B18 : FindItem         :   itemID, int     % args : itemID, *out item slot (FFFF if not found)
802D6B9C : RemoveItem       :   itemID, int     % args : itemID, *out item slot (FFFF if none were removed)

% The last argument is assumed to be a GameFlag.
802D6CC0 : MakeItemEntity   :   itemID, int, int, int, int, int     % args : itemID, XYZ, item flags, GameFlag (0 for no flag), RETURNS *itemHandle on Var[0]

% This is almost identical to MakeItemEntity, but this is used for items that drop from trees.
% The only difference between these functions is that MakeItemEntity uses GetVariableIndex on the saved flag value, while DropItem uses GetVariable
802D6DC0 : DropItemEntity   :   itemID, int, int, int, int, int     % args : itemID, vec3 spawn point, item flags (7/F/D/E/etc), GameVar, RETURNS *itemHandle on Var[0]

% 802D6EC0 same as DropItemEntity, except it also calls func_80134148 after func_80131A94

802D6FCC : RemoveItemEntity :   int                 % args : *itemHandle

802D6FF8 : AddBadge         :   itemID, int         % args : badgeID, *out badge slot
802D7050 : RemoveBadge      :   itemID              % args : itemID -- unequips and removes badge from inventory

802D70D0 : SetItemPos       :   int, int, int, int  % args : *itemHandle, x, y, z
802D7278 : AddCoin          :   int                 % args : delta coins (can be negative)
802D72F0 : AddStarPiece     :   int                 % args : delta quantity (can be negative)
802D732C : GetItemPower     :   itemID, int, int    % args: itemID, HP bonus from item table, FP bonus from item table
802D73A4 : ShowGotItem      :   itemID, ???, int    % args : itemID, ???, message box flags (0 = item, 10 = "1 coin", 20 = "3 star pieces", ...)

802D78A0 : ShowEmote        :   npcID, emote, int, ???, ???, ???, ???, ???, ???     % args : npcID, emoteType, angle (degrees ccw from 12:00), ???, flag?, ?, ?, ?

802D7AE4 : RemoveEffect     :   int     % args: *effectHandle

% 802D7CF8 can be used to darken the screen (ie, Rafael raven scene in jan_23)

% 802D8028 (many args)
% 802D8248 (nargs = 2)

% This function is ENORMOUS!
802D829C : PlayEffect       :   *   % RETURNS *effectHandle on *Var[F]
% 0000005E : lightning -- 0, casterX, casterY, casterZ, targetX, targetY, targetZ, size, ???, 0, 0, 0, 0 )
% 00000038 : pink particles -- 00000001 centerX, centerY, centerZ, 00000001 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
% ( 00000013 00000000 *VAR[0] *VAR[1] *VAR[2] 00000001 0000001E 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )
% 00000026 : musical notes, luigi whistling in kmr_20
% 00000007 : dust (for walking, see kmr_20) 00000001 *VAR[0] *VAR[1] *VAR[2] 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 )

% SPRITE SHADING
802D9700 : SetSpriteShading     :   int     % args : env shading index -- sets the shading effect on character sprites (but not items) in dark areas
802D9A3C : EnableSpriteShading  :   bool    % args : (0 = no shading | 1 = shading)

% DEMO INPUT
802D9A90 : GetDemoState         :   int         % args : *dest (0 ordinary gameplay | 1 manually issuing commands in demo | 2 demo map transition?)
802D9ACC : DemoPressButton      :   int         % args : button code to OR with existing buttons
802D9AF8 : DemoReleaseButton    :   int         % args : button code to negate and AND with existing buttons
802D9B34 : DemoSetButtons       :   int         % args : button code
802D9B64 : DemoJoystickPos      :   int, int    % args : (byte) radius (0-255), angle (degrees cw, 0 is straight up)
802D9C10 : DemoUseJoystick      :   int, int    % args : (byte) left/right, (byte) up/down
/%
% END 802C3000 - 802D9CA0
%/

